/*
* MinXValue.cpp: Этот файл решает задачу о минимальном значении ( X ), 
при котором можно съесть все фрукты за ( H ) часов. 
Он использует бинарный поиск для нахождения минимального значения ( X ), которое удовлетворяет условиям задачи.
*/

#include "MinXValue.h"
#include <algorithm> // Для std::max
#include <iostream>

int Solution::MinXValue(std::vector<int>& arr, int H) {
    // Находим максимальное значение в векторе 'arr'
    int X = *std::max_element(arr.begin(), arr.end());

    // Бинарный поиск для нахождения минимального значения X, удовлетворяющего условию
    int lo = 0, hi = X;
    while (lo <= hi) {
        int x = (lo + hi) / 2; // Находим среднее значение
        int reqTime = 0; // Переменная для хранения необходимого времени

        // Вычисляем общее время, необходимое для каждого элемента в 'arr'
        for (int val : arr) {
            // Вычисляем время, необходимое для съедения фруктов
            reqTime += (val + x - 1) / x; // Округляем вверх
        }

        // Проверяем, если общее время меньше или равно H
        if (reqTime <= H) {
            X = x; // Сохраняем значение X
            hi = x - 1; // Обновляем верхнюю границу
        }
        else {
            lo = x + 1; // Обновляем нижнюю границу
        }
    }

    // Возвращаем минимальное значение X
    return X;
}